digraph CalcShortestPath {
  rankdir=TB;
  node [shape=box, style=filled, fillcolor=lightblue];
  start [shape=oval, label="开始"];
  input [label="输入: word1, word2"];
  lowercase1 [label="word1 = word1.toLowerCase()"];
  check_word1 [shape=diamond, label="word1 在图中?"];
  error1 [shape=box, style=filled, fillcolor=pink, label="返回错误：起始单词不在图中"];
  check_word2 [shape=diamond, label="word2为null或空?"];
  any_word [label="调用calcShortestPathToAnyWord(word1)"];
  lowercase2 [label="word2 = word2.toLowerCase()"];
  check_both [shape=diamond, label="word1和word2都不在图中?"];
  error_both [shape=box, style=filled, fillcolor=pink, label="返回错误：两个单词都不在图中"];
  check_word1_again [shape=diamond, label="word1不在图中?"];
  error_word1 [shape=box, style=filled, fillcolor=pink, label="返回错误：word1不在图中"];
  check_word2_again [shape=diamond, label="word2不在图中?"];
  error_word2 [shape=box, style=filled, fillcolor=pink, label="返回错误：word2不在图中"];
  get_indices [label="获取单词索引\nstartIndex = wordToIndex.get(word1)\nendIndex = wordToIndex.get(word2)"];
  check_same [shape=diamond, label="startIndex == endIndex?"];
  same_word [shape=box, label="返回：路径为单词本身"];
  init_dijkstra [label="初始化Dijkstra\n- 创建距离数组\n- 创建前驱映射\n- 创建访问数组\n- 设置起点距离为0"];
  dijkstra_loop [label="Dijkstra主循环\nfor i = 0 to n-1"];
  find_min [label="找到距离最小的未访问节点"];
  check_min [shape=diamond, label="找到最小距离节点?"];
  break_loop [label="跳出循环"];
  mark_visited [label="标记节点为已访问"];
  update_neighbors [label="更新邻居节点距离\nfor j = 0 to n-1"];
  check_reachable [shape=diamond, label="终点不可达?"];
  no_path [shape=box, style=filled, fillcolor=pink, label="返回错误：无法到达终点"];
  find_all_paths [label="使用DFS找出所有最短路径"];
  build_result [label="构建结果字符串"];
  return_result [label="返回最短路径结果"];
  end [shape=oval, label="结束"];
  start -> input;
  input -> lowercase1;
  lowercase1 -> check_word1;
  check_word1 -> error1 [label="否"];
  check_word1 -> check_word2 [label="是"];
  check_word2 -> any_word [label="是"];
  any_word -> end;
  check_word2 -> lowercase2 [label="否"];
  lowercase2 -> check_both;
  check_both -> error_both [label="是"];
  check_both -> check_word1_again [label="否"];
  check_word1_again -> error_word1 [label="是"];
  check_word1_again -> check_word2_again [label="否"];
  check_word2_again -> error_word2 [label="是"];
  check_word2_again -> get_indices [label="否"];
  get_indices -> check_same;
  check_same -> same_word [label="是"];
  same_word -> end;
  check_same -> init_dijkstra [label="否"];
  init_dijkstra -> dijkstra_loop;
  dijkstra_loop -> find_min;
  find_min -> check_min;
  check_min -> break_loop [label="否"];
  check_min -> mark_visited [label="是"];
  mark_visited -> update_neighbors;
  update_neighbors -> dijkstra_loop [label="继续循环"];
  break_loop -> check_reachable;
  check_reachable -> no_path [label="是"];
  no_path -> end;
  check_reachable -> find_all_paths [label="否"];
  find_all_paths -> build_result;
  build_result -> return_result;
  return_result -> end;
  error1 -> end;
  error_both -> end;
  error_word1 -> end;
  error_word2 -> end;
}
