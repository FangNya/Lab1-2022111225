digraph PageRank {
    node [shape=box, style=filled, fillcolor=lightblue];
    edge [color=blue];
    rankdir=TB;

    start [shape=oval, fillcolor=lightgreen, label="开始"];
    convertCase [label="转换单词为小写"];
    checkWord [shape=diamond, fillcolor=lightyellow, label="单词是否在图中?"];
    returnError [label="返回-1.0（单词不在图中）"];
    initPR [label="初始化PageRank值\n(每个节点初始值为1/n)"];
    initLoop [label="初始化迭代（iter=0）"];
    checkIter [shape=diamond, fillcolor=lightyellow, label="iter < maxIterations?"];
    calcNewPR [label="计算新的PageRank值"];
    initNodeLoop [label="初始化节点循环（i=0）"];
    checkNodeIndex [shape=diamond, fillcolor=lightyellow, label="i < n?"];
    initBasePR [label="初始化基础PR值\n(1-d)/n"];
    initIncomingLoop [label="初始化入边循环（j=0）"];
    checkIncomingIndex [shape=diamond, fillcolor=lightyellow, label="j < n?"];
    checkEdge [shape=diamond, fillcolor=lightyellow, label="adjacencyMatrix[j][i] > 0?"];
    calcOutDegree [label="计算j的出度"];
    checkOutDegree [shape=diamond, fillcolor=lightyellow, label="outDegree > 0?"];
    updatePR [label="更新PR值\nPR[i] += d * PR[j] * 权重 / 出度"];
    incrementJ [label="j++"];
    incrementI [label="i++"];
    calcDiff [label="计算新旧PR值的差异"];
    updatePRArray [label="更新PR数组"];
    checkConverge [shape=diamond, fillcolor=lightyellow, label="diff < 阈值?"];
    incrementIter [label="iter++"];
    returnPR [label="返回指定单词的PageRank值"];
    end [shape=oval, fillcolor=lightgreen, label="结束"];
    start -> convertCase;
    convertCase -> checkWord;
    checkWord -> returnError [label="否"];
    checkWord -> initPR [label="是"];
    initPR -> initLoop;
    initLoop -> checkIter;
    checkIter -> calcNewPR [label="是"];
    checkIter -> returnPR [label="否"];
    calcNewPR -> initNodeLoop;
    initNodeLoop -> checkNodeIndex;
    checkNodeIndex -> initBasePR [label="是"];
    checkNodeIndex -> calcDiff [label="否"];
    initBasePR -> initIncomingLoop;
    initIncomingLoop -> checkIncomingIndex;
    checkIncomingIndex -> checkEdge [label="是"];
    checkIncomingIndex -> incrementI [label="否"];
    checkEdge -> calcOutDegree [label="是"];
    checkEdge -> incrementJ [label="否"];
    calcOutDegree -> checkOutDegree;
    checkOutDegree -> updatePR [label="是"];
    checkOutDegree -> incrementJ [label="否"];
    updatePR -> incrementJ;
    incrementJ -> checkIncomingIndex;
    incrementI -> checkNodeIndex;
    calcDiff -> updatePRArray;
    updatePRArray -> checkConverge;
    checkConverge -> returnPR [label="是"];
    checkConverge -> incrementIter [label="否"];
    incrementIter -> checkIter;
    returnPR -> end;
    returnError -> end;
}