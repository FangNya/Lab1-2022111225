digraph ShortestPath {
    node [shape=box, style=filled, fillcolor=lightblue];
    edge [color=blue];
    rankdir=TB;

    start [shape=oval, fillcolor=lightgreen, label="开始"];
    convertCase [label="转换单词为小写"];
    checkWord1 [shape=diamond, fillcolor=lightyellow, label="word1是否在图中?"];
    errorWord1 [label="返回：起始单词不在图中"];
    checkWord2Null [shape=diamond, fillcolor=lightyellow, label="word2是否为null?"];
    calcToAny [label="计算到任意单词的最短路径"];
    checkWord2 [shape=diamond, fillcolor=lightyellow, label="word2是否在图中?"];
    errorWord2 [label="返回：目标单词不在图中"];
    checkSame [shape=diamond, fillcolor=lightyellow, label="word1和word2\n是否相同?"];
    returnSame [label="返回：相同单词的路径"];
    initDijkstra [label="初始化Dijkstra算法\n(距离、前驱列表、访问状态)"];
    dijkstraLoop [label="Dijkstra主循环"];
    findMinNode [label="找到距离最小的未访问节点"];
    markVisited [label="标记节点为已访问"];
    updateNeighbors [label="更新相邻节点的距离\n记录多条等长路径"];
    checkNoPath [shape=diamond, fillcolor=lightyellow, label="是否无法到达终点?"];
    returnNoPath [label="返回：无路径"];
    findAllPaths [label="使用DFS找出\n所有最短路径"];
    formatResult [label="格式化结果字符串"];
    end [shape=oval, fillcolor=lightgreen, label="结束"];
    start -> convertCase;
    convertCase -> checkWord1;
    checkWord1 -> errorWord1 [label="否"];
    checkWord1 -> checkWord2Null [label="是"];
    checkWord2Null -> calcToAny [label="是"];
    checkWord2Null -> checkWord2 [label="否"];
    checkWord2 -> errorWord2 [label="否"];
    checkWord2 -> checkSame [label="是"];
    checkSame -> returnSame [label="是"];
    checkSame -> initDijkstra [label="否"];
    initDijkstra -> dijkstraLoop;
    dijkstraLoop -> findMinNode;
    findMinNode -> markVisited;
    markVisited -> updateNeighbors;
    updateNeighbors -> dijkstraLoop [label="继续"];
    dijkstraLoop -> checkNoPath [label="完成"];
    checkNoPath -> returnNoPath [label="是"];
    checkNoPath -> findAllPaths [label="否"];
    findAllPaths -> formatResult;
    formatResult -> end;
    errorWord1 -> end;
    errorWord2 -> end;
    returnSame -> end;
    returnNoPath -> end;
    calcToAny -> end;
}