digraph GenerateNewText {
    node [shape=box, style=filled, fillcolor=lightblue];
    edge [color=blue];
    rankdir=TB;

    start [shape=oval, fillcolor=lightgreen, label="开始"];
    checkEmpty [shape=diamond, fillcolor=lightyellow, label="输入文本是否为空?"];
    returnEmpty [label="返回空字符串"];
    extractWords [label="提取文本中的单词"];
    checkWordCount [shape=diamond, fillcolor=lightyellow, label="单词数量<=1?"];
    returnOriginal [label="返回原文本"];
    processFirstWord [label="处理第一个单词"];
    initForLoop [label="初始化循环i=1"];
    getPrevWord [label="获取前一个单词(i-1)"];
    getCurrWord [label="获取当前单词(i)"];
    queryBridge [label="查询桥接词"];
    checkBridge [shape=diamond, fillcolor=lightyellow, label="找到桥接词?"];
    extractBridges [label="提取桥接词列表"];
    selectRandomBridge [label="随机选择一个桥接词"];
    addBridge [label="添加桥接词到新文本"];
    addCurrentWord [label="添加当前单词到新文本"];
    incrementLoop [label="i++"];
    checkMoreWords [shape=diamond, fillcolor=lightyellow, label="i < words.size()?"];
    returnNewText [label="返回新文本"];
    end [shape=oval, fillcolor=lightgreen, label="结束"];
    start -> checkEmpty;
    checkEmpty -> returnEmpty [label="是"];
    checkEmpty -> extractWords [label="否"];
    extractWords -> checkWordCount;
    checkWordCount -> returnOriginal [label="是"];
    checkWordCount -> processFirstWord [label="否"];
    processFirstWord -> initForLoop;
    initForLoop -> getPrevWord;
    getPrevWord -> getCurrWord;
    getCurrWord -> queryBridge;
    queryBridge -> checkBridge;
    checkBridge -> extractBridges [label="是"];
    checkBridge -> addCurrentWord [label="否"];
    extractBridges -> selectRandomBridge;
    selectRandomBridge -> addBridge;
    addBridge -> addCurrentWord;
    addCurrentWord -> incrementLoop;
    incrementLoop -> checkMoreWords;
    checkMoreWords -> getPrevWord [label="是"];
    checkMoreWords -> returnNewText [label="否"];
    returnEmpty -> end;
    returnOriginal -> end;
    returnNewText -> end;
}