digraph ControlFlowGraph {
  rankdir=TB;
  graph [fontname="Microsoft YaHei" fontsize=12];
  node [fontname="Microsoft YaHei" fontsize=12 shape=box style=filled fillcolor=lightblue];
  edge [fontname="Microsoft YaHei" fontsize=10];
  entry [shape=oval, label="入口: calcShortestPath"];
  block1 [label="word1 = word1.toLowerCase();\n检查word1是否在图中"];
  block2 [shape=box, style=filled, fillcolor=pink, label="返回错误：起始单词不在图中"];
  block3 [label="检查word2是否为null或空"];
  block4 [label="调用calcShortestPathToAnyWord(word1)"];
  block5 [label="word2 = word2.toLowerCase()"];
  block6 [label="检查word1和word2是否都不在图中"];
  block7 [shape=box, style=filled, fillcolor=pink, label="返回错误：两个单词都不在图中"];
  block8 [label="检查word1是否不在图中"];
  block9 [shape=box, style=filled, fillcolor=pink, label="返回错误：word1不在图中"];
  block10 [label="检查word2是否不在图中"];
  block11 [shape=box, style=filled, fillcolor=pink, label="返回错误：word2不在图中"];
  block12 [label="获取索引:\nstartIndex = wordToIndex.get(word1)\nendIndex = wordToIndex.get(word2)"];
  block13 [label="检查startIndex == endIndex"];
  block14 [label="返回：路径为单词本身"];
  block15 [label="初始化Dijkstra:\n- 创建距离数组\n- 创建前驱映射\n- 创建访问数组\n- 设置起点距离为0"];
  block16 [label="进入Dijkstra主循环\nfor i = 0 to n-1"];
  block17 [label="查找距离最小的未访问节点"];
  block18 [label="检查是否找到最小距离节点"];
  block19 [label="跳出循环"];
  block20 [label="标记节点为已访问\n更新邻居节点距离"];
  block21 [label="检查终点是否可达"];
  block22 [shape=box, style=filled, fillcolor=pink, label="返回错误：无法到达终点"];
  block23 [label="使用DFS查找所有最短路径\n构建结果字符串"];
  block24 [label="返回最短路径结果"];
  exit [shape=oval, label="出口"];
  entry -> block1;
  block1 -> block2 [label="否"];
  block2 -> exit;
  block1 -> block3 [label="是"];
  block3 -> block4 [label="是"];
  block4 -> exit;
  block3 -> block5 [label="否"];
  block5 -> block6;
  block6 -> block7 [label="是"];
  block7 -> exit;
  block6 -> block8 [label="否"];
  block8 -> block9 [label="是"];
  block9 -> exit;
  block8 -> block10 [label="否"];
  block10 -> block11 [label="是"];
  block11 -> exit;
  block10 -> block12 [label="否"];
  block12 -> block13;
  block13 -> block14 [label="是"];
  block14 -> exit;
  block13 -> block15 [label="否"];
  block15 -> block16;
  block16 -> block17 [label="i < n"];
  block17 -> block18;
  block18 -> block19 [label="否"];
  block18 -> block20 [label="是"];
  block20 -> block16 [label="继续循环"];
  block19 -> block21;
  block21 -> block22 [label="是"];
  block22 -> exit;
  block21 -> block23 [label="否"];
  block23 -> block24;
  block24 -> exit;
  block16 -> block21 [label="i >= n"];
  {rank=same; block16 block19}
}
